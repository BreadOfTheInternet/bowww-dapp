// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract BowwwSwap {
    address public owner;
    IERC20  public bowwwToken;
    uint256 public rate = 369;

    constructor(address _bowwwToken) {
        owner      = msg.sender;
        bowwwToken = IERC20(_bowwwToken);
    }

    receive() external payable {
        buyBowww();
    }

    function buyBowww() public payable {
        require(msg.value > 0, "Send some MATIC");
        uint256 amountToSend = msg.value * rate;
        require(
            bowwwToken.balanceOf(address(this)) >= amountToSend, 
            "Not enough BOWWW in contract"
        );
        bowwwToken.transfer(msg.sender, amountToSend);
    }

    function withdrawMatic() external {
        require(msg.sender == owner, "Only owner");
        payable(owner).transfer(address(this).balance);
    }

    function withdrawTokens() external {
        require(msg.sender == owner, "Only owner");
        uint256 balance = bowwwToken.balanceOf(address(this));
        bowwwToken.transfer(owner, balance);
    }

    function updateRate(uint256 newRate) external {
        require(msg.sender == owner, "Only owner");
        rate = newRate;
    }
}

